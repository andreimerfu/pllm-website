---

interface NavItem {
  label: string;
  href: string;
  external?: boolean;
}

const navItems: NavItem[] = [
  { label: "Features", href: "#features" },
  { label: "Authentication", href: "#authentication" },
  { label: "Architecture", href: "#architecture" },
  { label: "Roadmap", href: "#roadmap" },
  { label: "Support", href: "#support" },
  { label: "GitHub", href: "https://github.com/andreimerfu/pllm", external: true }
];
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-white/90 dark:bg-slate-900/90 backdrop-blur-sm border-b border-slate-200 dark:border-slate-700 transition-colors duration-200">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-2">
          <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
            <span class="text-white font-bold text-lg">p</span>
          </div>
          <span class="text-xl font-bold text-slate-900 dark:text-white transition-colors duration-200">pLLM</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-8">
          {navItems.map((item) => (
            <a
              href={item.href}
              target={item.external ? "_blank" : undefined}
              rel={item.external ? "noopener noreferrer" : undefined}
              class="text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200"
            >
              {item.label}
              {item.external && (
                <svg class="inline-block ml-1 w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                </svg>
              )}
            </a>
          ))}
        </div>
      </div>

      <!-- CTA Button & Theme Toggle -->
      <div class="hidden md:flex items-center space-x-4">
        <button
          id="theme-toggle"
          class="relative w-10 h-10 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 border border-slate-200 dark:border-slate-600 hover:border-slate-300 dark:hover:border-slate-500 transition-all duration-200 flex items-center justify-center group shadow-sm hover:shadow-md"
          aria-label="Toggle theme"
        >
          <div class="relative w-6 h-6 overflow-hidden">
            <!-- Sun icon -->
            <svg id="sun-icon" class="absolute inset-0 w-6 h-6 text-amber-500 hover:text-amber-600 transition-all duration-300 transform rotate-0 scale-100 opacity-100" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="5"></circle>
              <path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path>
            </svg>
            <!-- Moon icon -->
            <svg id="moon-icon" class="absolute inset-0 w-6 h-6 text-slate-100 hover:text-white transition-all duration-300 transform -rotate-90 scale-0 opacity-0" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"></path>
            </svg>
          </div>
          
          <!-- Tooltip -->
          <div id="theme-tooltip" class="absolute -bottom-10 left-1/2 transform -translate-x-1/2 bg-slate-900 dark:bg-slate-100 text-white dark:text-slate-900 text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap pointer-events-none">
            Dark mode
          </div>
        </button>
        <a
          href="#quick-start"
          class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-2 rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all duration-200 shadow-md hover:shadow-lg"
        >
          Get Started
        </a>
      </div>

      <!-- Mobile menu button & theme toggle -->
      <div class="md:hidden flex items-center space-x-2">
        <button
          id="theme-toggle-mobile"
          class="relative w-10 h-10 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 border border-slate-200 dark:border-slate-600 hover:border-slate-300 dark:hover:border-slate-500 transition-all duration-200 flex items-center justify-center group shadow-sm hover:shadow-md"
          aria-label="Toggle theme"
        >
          <div class="relative w-6 h-6 overflow-hidden">
            <!-- Sun icon -->
            <svg id="sun-icon-mobile" class="absolute inset-0 w-6 h-6 text-amber-500 hover:text-amber-600 transition-all duration-300 transform rotate-0 scale-100 opacity-100" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="5"></circle>
              <path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path>
            </svg>
            <!-- Moon icon -->
            <svg id="moon-icon-mobile" class="absolute inset-0 w-6 h-6 text-slate-100 hover:text-white transition-all duration-300 transform -rotate-90 scale-0 opacity-0" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"></path>
            </svg>
          </div>
        </button>
        <button
          type="button"
          id="mobile-menu-button"
          class="bg-slate-100 dark:bg-slate-800 inline-flex items-center justify-center p-2 rounded-md text-slate-400 dark:text-slate-300 hover:text-slate-500 dark:hover:text-slate-200 hover:bg-slate-200 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 transition-colors duration-200"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white dark:bg-slate-900 border-t border-slate-200 dark:border-slate-700 transition-colors duration-200">
      {navItems.map((item) => (
        <a
          href={item.href}
          target={item.external ? "_blank" : undefined}
          rel={item.external ? "noopener noreferrer" : undefined}
          class="text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200"
        >
          {item.label}
        </a>
      ))}
      <div class="pt-4 pb-2">
        <a
          href="#quick-start"
          class="bg-gradient-to-r from-blue-500 to-purple-600 text-white block text-center px-6 py-3 rounded-lg font-medium mx-3"
        >
          Get Started
        </a>
      </div>
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu functionality
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }

    // Theme toggle functionality
    const initThemeToggle = () => {
      const isDark = document.documentElement.classList.contains('dark');
      
      // Update desktop icons
      const sunIcon = document.getElementById('sun-icon');
      const moonIcon = document.getElementById('moon-icon');
      const tooltip = document.getElementById('theme-tooltip');
      
      // Update mobile icons
      const sunIconMobile = document.getElementById('sun-icon-mobile');
      const moonIconMobile = document.getElementById('moon-icon-mobile');
      
      if (isDark) {
        // Dark mode - show moon
        if (sunIcon) {
          sunIcon.classList.add('rotate-90', 'scale-0', 'opacity-0');
          sunIcon.classList.remove('rotate-0', 'scale-100', 'opacity-100');
        }
        if (moonIcon) {
          moonIcon.classList.add('rotate-0', 'scale-100', 'opacity-100');
          moonIcon.classList.remove('-rotate-90', 'scale-0', 'opacity-0');
        }
        if (sunIconMobile) {
          sunIconMobile.classList.add('rotate-90', 'scale-0', 'opacity-0');
          sunIconMobile.classList.remove('rotate-0', 'scale-100', 'opacity-100');
        }
        if (moonIconMobile) {
          moonIconMobile.classList.add('rotate-0', 'scale-100', 'opacity-100');
          moonIconMobile.classList.remove('-rotate-90', 'scale-0', 'opacity-0');
        }
        if (tooltip) tooltip.textContent = 'Light mode';
      } else {
        // Light mode - show sun
        if (sunIcon) {
          sunIcon.classList.add('rotate-0', 'scale-100', 'opacity-100');
          sunIcon.classList.remove('rotate-90', 'scale-0', 'opacity-0');
        }
        if (moonIcon) {
          moonIcon.classList.add('-rotate-90', 'scale-0', 'opacity-0');
          moonIcon.classList.remove('rotate-0', 'scale-100', 'opacity-100');
        }
        if (sunIconMobile) {
          sunIconMobile.classList.add('rotate-0', 'scale-100', 'opacity-100');
          sunIconMobile.classList.remove('rotate-90', 'scale-0', 'opacity-0');
        }
        if (moonIconMobile) {
          moonIconMobile.classList.add('-rotate-90', 'scale-0', 'opacity-0');
          moonIconMobile.classList.remove('rotate-0', 'scale-100', 'opacity-100');
        }
        if (tooltip) tooltip.textContent = 'Dark mode';
      }
    };

    const toggleTheme = () => {
      const isDark = document.documentElement.classList.contains('dark');
      
      if (isDark) {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      } else {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      }
      
      initThemeToggle();
    };

    // Initialize theme toggle state
    initThemeToggle();

    // Add event listeners
    const themeToggle = document.getElementById('theme-toggle');
    const themeToggleMobile = document.getElementById('theme-toggle-mobile');
    
    if (themeToggle) {
      themeToggle.addEventListener('click', toggleTheme);
    }
    if (themeToggleMobile) {
      themeToggleMobile.addEventListener('click', toggleTheme);
    }
  });
</script>